{"version":3,"sources":["components/stopwatch.jsx","components/BtnGroup.jsx","containers/App.js","reportWebVitals.js","index.js"],"names":["StopWatch","hours","minutes","seconds","className","BtnGroup","status","start","stop","wait","reset","resume","onClick","onDoubleClick","App","useState","h","m","s","time","setTime","interv","setInterv","setStatus","hour","min","sec","useEffect","timerId","setInterval","run","clearInterval","startTick","secondClick","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oLAgBeA,EAdG,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QACjC,OACI,qBAAKC,UAAU,gBAAf,SACI,qBAAKA,UAAU,kBAAf,SACI,sBAAKA,UAAU,OAAf,UACI,iCAAOH,EAAP,OACA,iCAAOC,EAAP,OACA,+BAAOC,YCMZE,EAZE,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,OAAQC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAClD,OACI,sBAAKP,UAAU,oBAAf,UACiB,IAAXE,GAAgB,wBAAQM,QAASL,EAAjB,mBACL,IAAXD,GAAgB,wBAAQM,QAASJ,EAAjB,kBACL,IAAXF,GAAgB,wBAAQM,QAASD,EAAjB,oBAClB,wBAAQE,cAAeJ,EAAvB,kBACA,wBAAQG,QAASF,EAAjB,uBCoFGI,EAzFH,WAAO,IAAD,EACQC,mBAAS,CAAEC,EAAG,EAAGC,EAAG,EAAGC,EAAG,IADlC,mBACTC,EADS,KACHC,EADG,OAEYL,oBAAS,GAFrB,mBAETM,EAFS,KAEDC,EAFC,OAGYP,mBAAS,GAHrB,mBAGTT,EAHS,KAGDiB,EAHC,KAUZC,EAAOL,EAAKH,EACZS,EAAMN,EAAKF,EACXS,EAAMP,EAAKD,EAEfS,qBAAU,WACR,IAAIC,EAMJ,OALc,IAAXP,EACDO,EAAUC,YAAYC,EAAK,KAE3BC,cAAcH,GAER,WACNG,cAAcH,OAIlB,IAAMI,EAAY,WAChBT,EAAU,GACVD,GAAU,IAENQ,EAAM,WAUV,OARW,OADXJ,IAEED,IACAC,EAAM,GAEG,KAARD,IACDD,IACAC,EAAM,GAEDL,EAAQ,CAAEJ,EAAGQ,EAAMP,EAAGQ,EAAKP,EAAGQ,KA8BvC,OACE,sBAAKtB,UAAU,UAAf,UACE,cAAC,EAAD,CACAG,MAAOyB,EACP1B,OAAQA,EACRE,KAhCa,WACfe,EAAU,GACVD,GAAU,GACVF,EAAQ,CAAEJ,EAAG,EAAGC,EAAG,EAAGC,EAAG,KA8BvBR,MAZe,WACjBY,GAAU,GACVF,EAAQ,CAAEJ,EAAG,EAAGC,EAAG,EAAGC,EAAG,IACzBc,KAUEvB,KA1Ba,WACf,IAAIwB,GAAc,EAEdA,EAOAA,GAAc,GANdC,YAAW,WACTD,GAAc,IAHJ,KAKZV,EAAU,GACVD,GAAU,KAmBZX,OA9Be,WACjB,OAAOqB,OA+BL,cAAC,EAAD,CACA/B,MAAOkB,EAAKH,GAAK,GAAKG,EAAKH,EAAI,IAAMG,EAAKH,EAC1Cd,QAASiB,EAAKF,GAAK,GAAKE,EAAKF,EAAI,IAAME,EAAKF,EAC5Cd,QAASgB,EAAKD,GAAK,GAAKC,EAAKD,EAAI,IAAMC,EAAKD,QC5EnCiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,SAM5BZ,M","file":"static/js/main.efd856e5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst StopWatch = ({ hours, minutes, seconds }) => {\r\n    return(\r\n        <div className=\"watch-wrapper\">\r\n            <div className=\"watch-container\">\r\n                <div className=\"time\">\r\n                    <span>{hours}:</span>\r\n                    <span>{minutes}:</span>\r\n                    <span>{seconds}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StopWatch;","import React from 'react';\r\n\r\n\r\nconst BtnGroup = ({ status, start, stop, wait, reset, resume }) => {\r\n    return(\r\n        <div className=\"btn-group-wrapper\">\r\n            { status === 0 && <button onClick={start}>Start</button> }\r\n            { status === 1 && <button onClick={stop}>Stop</button> }\r\n            { status === 2 && <button onClick={resume}>Resume</button> }\r\n            <button onDoubleClick={wait}>Wait</button>\r\n            <button onClick={reset}>Reset</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BtnGroup;","import React, { useState, useEffect } from 'react';\nimport StopWatch from '../components/stopwatch';\nimport BtnGroup from '../components/BtnGroup';\n\n\nconst App = () => {\n  const [time, setTime] = useState({ h: 0, m: 0, s: 0 });\n  const [interv, setInterv] = useState(false);\n  const [status, setStatus] = useState(0);\n  /* status:\n     0 = start,\n     1 = stop,\n     2 = resume\n  */\n\n  let hour = time.h,\n      min = time.m,\n      sec = time.s;\n\n  useEffect(() => {\n    let timerId;\n    if(interv === true){\n      timerId = setInterval(run, 100);\n    }else{\n      clearInterval(timerId);\n    }\n    return  () => {\n      clearInterval(timerId);\n    }\n  })\n\n  const startTick = () => {\n    setStatus(1);\n    setInterv(true);\n  };\n  const run = () => {\n    sec++;\n    if(sec === 60){\n      min++;\n      sec = 0;\n    }\n    if(min === 60){\n      hour++;\n      min = 0\n    }\n    return setTime({ h: hour, m: min, s: sec });\n  };\n\n  const stopTick = () => {\n    setStatus(0);\n    setInterv(false);\n    setTime({ h: 0, m: 0, s: 0 }); \n  }\n  const resumeTick = () => {\n    return startTick();\n  }\n  const waitTick = () => {\n    let secondClick = false;\n    let duration  = 300;\n    if(!secondClick){\n        setTimeout(() => {\n          secondClick = true;\n        }, duration);\n        setStatus(2);\n        setInterv(false);\n    }else{\n        secondClick = false;\n    }\n  }\n  const resetClick = () => {\n    setInterv(false);\n    setTime({ h: 0, m: 0, s: 0 }); \n    startTick();\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <BtnGroup \n      start={startTick} \n      status={status} \n      stop={stopTick} \n      reset={resetClick} \n      wait={waitTick} \n      resume={resumeTick}\n      />\n      <StopWatch \n      hours={time.h >= 10 ? time.h : \"0\" + time.h} \n      minutes={time.m >= 10 ? time.m : \"0\" + time.m} \n      seconds={time.s >= 10 ? time.s : \"0\" + time.s } \n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render((\n    <App />\n  ),document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}